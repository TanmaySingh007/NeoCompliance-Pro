import jsPDF from 'jspdf';

// PDF Generation Service
export const generatePDF = async (currentReport: any): Promise<void> => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    let yPosition = 20;

    // Helper function to add new page if needed
    const checkPageSpace = (neededSpace: number) => {
      if (yPosition + neededSpace > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Helper function to add wrapped text
    const addText = (text: string, x: number, fontSize: number = 12, maxWidth: number = pageWidth - 40) => {
      pdf.setFontSize(fontSize);
      const lines = pdf.splitTextToSize(text, maxWidth);
      pdf.text(lines, x, yPosition);
      yPosition += lines.length * (fontSize * 0.6) + 5;
      return lines.length;
    };

    // Enhanced PDF Header with magical styling
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(102, 126, 234);
    pdf.text('✨ NeoCompliance-Pro Compliance Report ✨', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 25;

    // Title and summary
    pdf.setFontSize(18);
    pdf.setTextColor(118, 75, 162);
    addText(`Compliance Analysis for ${currentReport.guideline.name}`, 20, 18);

    pdf.setFontSize(14);
    pdf.setTextColor(64, 64, 64);
    const summaryText = currentReport.overallRating === 'Compliant' ?
    'The advertisement aligns with most guidelines but has minor areas needing improvement.' :
    'The ad mostly aligns with the code but has some areas needing improvement.';
    addText(summaryText, 20, 14);

    // Overall Rating
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(32, 32, 32);
    addText(`Overall Rating: ${currentReport.overallRating}`, 20, 16);

    // Disclaimer
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    const disclaimerText = 'This report was generated by NeoCompliance-Pro and may contain errors. NeoCompliance-Pro is not liable for any decisions made based on its contents.';
    addText(disclaimerText, 20, 10);

    yPosition += 10;

    // Calculate summary counts
    const resultCounts = {
      all: currentReport.results.length,
      passed: currentReport.results.filter((r: any) => r.status === 'PASS').length,
      warning: currentReport.results.filter((r: any) => r.status === 'WARNING').length,
      failed: currentReport.results.filter((r: any) => r.status === 'FAIL').length
    };

    // Summary section
    checkPageSpace(30);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(32, 32, 32);
    addText('Summary', 20, 14);

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`All (${resultCounts.all})`, 20, yPosition);
    pdf.text(`Passed (${resultCounts.passed})`, 60, yPosition);
    pdf.text(`Warnings (${resultCounts.warning})`, 110, yPosition);
    pdf.text(`Failed (${resultCounts.failed})`, 170, yPosition);
    yPosition += 20;

    // Detailed Results
    checkPageSpace(20);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(32, 32, 32);
    addText('Detailed Results:', 20, 14);

    currentReport.results.forEach((result: any, index: number) => {
      checkPageSpace(60);

      // Result name
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(32, 32, 32);
      addText(`${index + 1}. ${result.name}`, 20, 12);

      // Status badge
      const statusColor = result.status === 'PASS' ? [34, 197, 94] :
      result.status === 'WARNING' ? [234, 179, 8] : [239, 68, 68];
      pdf.setTextColor(...statusColor);
      pdf.setFont('helvetica', 'bold');
      addText(result.status, 20, 12);

      // Description
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(64, 64, 64);
      addText(result.description, 20, 11, pageWidth - 50);

      // Reason (for PASS status)
      if (result.reason && result.status === 'PASS') {
        pdf.setTextColor(34, 197, 94);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Why it passed: ', 20, yPosition);
        pdf.setFont('helvetica', 'normal');
        addText(result.reason, 20, 11, pageWidth - 70);
      }

      // Recommendation (for WARNING/FAIL status)
      if (result.recommendation && (result.status === 'WARNING' || result.status === 'FAIL')) {
        const recColor = result.status === 'WARNING' ? [234, 179, 8] : [239, 68, 68];
        pdf.setTextColor(...recColor);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Recommendation: ', 20, yPosition);
        pdf.setFont('helvetica', 'normal');
        addText(result.recommendation, 20, 11, pageWidth - 70);
      }

      yPosition += 10;
    });

    // Save the PDF
    const fileName = `${currentReport.guideline.name.replace(/[^a-z0-9]/gi, '_')}_enhanced_compliance_report.pdf`;
    pdf.save(fileName);

    console.log('PDF report generated and downloaded successfully');
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

// Generate text report
export const generateTextReport = (currentReport: any): void => {
  try {
    const resultCounts = {
      all: currentReport.results.length,
      passed: currentReport.results.filter((r: any) => r.status === 'PASS').length,
      warning: currentReport.results.filter((r: any) => r.status === 'WARNING').length,
      failed: currentReport.results.filter((r: any) => r.status === 'FAIL').length
    };

    let content = `✨ NeoCompliance-Pro - Compliance Report ✨\n`;
    content += `=====================================\n\n`;
    content += `Compliance Analysis for ${currentReport.guideline.name}\n`;
    content += currentReport.overallRating === 'Compliant' ?
    'The advertisement aligns with most guidelines but has minor areas needing improvement.\n\n' :
    'The ad mostly aligns with the code but has some areas needing improvement.\n\n';

    content += `Overall Rating:\n`;
    content += `${currentReport.overallRating}\n`;
    content += `This report was generated by NeoCompliance-Pro and may contain errors. NeoCompliance-Pro is not liable for any decisions made based on its contents.\n\n`;

    content += `Filter Results\n`;
    content += `All (${resultCounts.all})\n`;
    content += `Passed (${resultCounts.passed})\n`;
    content += `Warnings (${resultCounts.warning})\n`;
    content += `Failed (${resultCounts.failed})\n\n`;

    currentReport.results.forEach((result: any, index: number) => {
      content += `${index + 1}. ${result.name}\n`;
      content += `${result.status}\n`;
      content += `${result.description}\n`;

      if (result.reason && result.status === 'PASS') {
        content += `Why it passed: ${result.reason}\n`;
      }

      if (result.recommendation && (result.status === 'WARNING' || result.status === 'FAIL')) {
        content += `Recommendation: ${result.recommendation}\n`;
      }
      content += `\n`;
    });

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${currentReport.guideline.name.replace(/[^a-z0-9]/gi, '_')}_enhanced_compliance_report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('Text report generated and downloaded successfully');
  } catch (error) {
    console.error('Error generating text file:', error);
    throw error;
  }
};